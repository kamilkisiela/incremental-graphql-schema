{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../node_modules/graphql-tag/src/index.js","../../src/data/OperationData.ts","../../src/data/QueryData.ts","../../src/utils/useBaseQuery.ts","../../src/utils/useDeepMemo.ts","../../src/data/MutationData.ts","../../src/data/SubscriptionData.ts","../../src/ssr/RenderPromises.ts","../../src/Query.tsx","../../src/useQuery.ts","../../src/Mutation.tsx","../../src/useMutation.ts","../../src/Subscription.tsx","../../src/useSubscription.ts"],"names":["_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","parse","require","normalize","string","replace","trim","docCache","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","parseDocument","doc","cacheKey","parsed","kind","Error","stripLoc","removeLocAtThisLevel","docType","prototype","toString","call","map","d","loc","startToken","endToken","key","valueType","keys","hasOwnProperty","ast","astFragmentMap","definitions","i","length","fragmentDefinition","fragmentName","name","sourceKey","source","body","substring","start","end","console","warn","push","processFragments","gql","args","Array","arguments","literals","result","default","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","module","exports","options","context","isMounted","previousOptions","this","getOptions","setOptions","newOptions","storePrevious","isEqual","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","document","type","operation","onNewData","previousData","currentObservable","runLazy","runLazyQuery","lazyOptions","getExecuteResult","getQueryResult","startQuerySubscription","obsRefetch","variables","query","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","removeQuerySubscription","updateObservableQuery","getExecuteSsrResult","executeLazy","loading","networkStatus","ready","called","data","undefined","fetchData","ssr","obs","getCurrentResult","afterExecute","lazy","handleErrorOrCompleted","bind","ssrInitiated","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","Query","displayName","fetchPolicy","metadata","reactComponent","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","catch","subscription","obsQuery","subscribe","next","previousResult","error","resubscribeToQuery","lastError","getLastError","lastResult","getLastResult","resetLastResults","assign","currentResult","partial","errors","graphQLErrors","partialRefetch","resetQueryStoreErrors","onCompleted","onError","unsubscribe","useBaseQuery","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","Promise","resolve","then","memoFn","ref","useDeepMemo","queryResult","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","response","onMutationCompleted","onMutationError","mutation","Mutation","mostRecentMutationId","optimisticResponse","update","awaitRefetchQueries","mutateOptions","mutateVariables","refetchQueries","mutationContext","ignoreResults","updateResult","isMostRecentMutation","initialize","getLoadingResult","shouldResubscribe","startSubscription","endSubscription","updateCurrentData","updateError","complete","completeSubscription","onSubscriptionData","subscriptionData","onSubscriptionComplete","queryPromises","Map","queryInfoTrie","observable","props","lookupQueryInfo","queryInstance","finish","seen","set","hasPromises","size","consumeAndAwaitPromises","promises","forEach","promise","clear","all","varMap","get","has","variablesString","JSON","stringify","info","useQuery","mutationDataRef","mutationData","subscriptionDataRef","useSubscription","propTypes","object","func","isRequired","notifyOnNetworkStatusChange","bool","number","returnPartialData","oneOfType","arrayOf"],"mappings":"4FAAe,SAASA,EAAuBC,EAASC,GAKtD,OAJKA,IACHA,EAAMD,EAAQE,MAAM,IAGfC,OAAOC,OAAOD,OAAOE,iBAAiBL,EAAS,CACpDC,IAAK,CACHK,MAAOH,OAAOC,OAAOH,OAP3B,mC,oBCAA,IAEIM,EAFSC,EAAQ,IAEFD,MAInB,SAASE,EAAUC,GACjB,OAAOA,EAAOC,QAAQ,UAAW,KAAKC,OAIxC,IAAIC,EAAW,GAGXC,EAAoB,GAexB,IAAIC,GAAwB,EA2F5B,IAAIC,GAAgC,EACpC,SAASC,EAAcC,GACrB,IAAIC,EAAWV,EAAUS,GAEzB,GAAIL,EAASM,GACX,OAAON,EAASM,GAGlB,IAAIC,EAASb,EAAMW,EAAK,CAAEF,8BAA+BA,IACzD,IAAKI,GAA0B,aAAhBA,EAAOC,KACpB,MAAM,IAAIC,MAAM,iCASlB,OAHAF,EA5DF,SAASG,EAASL,EAAKM,GACrB,IAAIC,EAAUtB,OAAOuB,UAAUC,SAASC,KAAKV,GAE7C,GAAgB,mBAAZO,EACF,OAAOP,EAAIW,KAAI,SAAUC,GACvB,OAAOP,EAASO,EAAGN,MAIvB,GAAgB,oBAAZC,EACF,MAAM,IAAIH,MAAM,qBAKdE,GAAwBN,EAAIa,YACvBb,EAAIa,IAITb,EAAIa,aACCb,EAAIa,IAAIC,kBACRd,EAAIa,IAAIE,UAGjB,IACIC,EACA5B,EACA6B,EAHAC,EAAOjC,OAAOiC,KAAKlB,GAKvB,IAAKgB,KAAOE,EACNA,EAAKC,eAAeH,KACtB5B,EAAQY,EAAIkB,EAAKF,IAGC,qBAFlBC,EAAYhC,OAAOuB,UAAUC,SAASC,KAAKtB,KAEU,mBAAd6B,IACrCjB,EAAIkB,EAAKF,IAAQX,EAASjB,GAAO,KAKvC,OAAOY,EAmBEK,CADTH,EAzGF,SAA0BkB,GAIxB,IAHA,IAfuBP,EAenBQ,EAAiB,GACjBC,EAAc,GAETC,EAAI,EAAGA,EAAIH,EAAIE,YAAYE,OAAQD,IAAK,CAC/C,IAAIE,EAAqBL,EAAIE,YAAYC,GAEzC,GAAgC,uBAA5BE,EAAmBtB,KAA+B,CACpD,IAAIuB,EAAeD,EAAmBE,KAAKvC,MACvCwC,EAtBDrC,GADgBsB,EAuBaY,EAAmBZ,KAtBlCgB,OAAOC,KAAKC,UAAUlB,EAAImB,MAAOnB,EAAIoB,MAyBlDrC,EAAkBuB,eAAeO,KAAkB9B,EAAkB8B,GAAcE,IAIjF/B,GACFqC,QAAQC,KAAK,+BAAiCT,EAAe,iMAK/D9B,EAAkB8B,GAAcE,IAAa,GAEnChC,EAAkBuB,eAAeO,KAC3C9B,EAAkB8B,GAAgB,GAClC9B,EAAkB8B,GAAcE,IAAa,GAG1CP,EAAeO,KAClBP,EAAeO,IAAa,EAC5BN,EAAYc,KAAKX,SAGnBH,EAAYc,KAAKX,GAKrB,OADAL,EAAIE,YAAcA,EACXF,EAkEEiB,CAAiBnC,IACA,GAC1BP,EAASM,GAAYC,EAEdA,EAYT,SAASoC,IAQP,IAPA,IAAIC,EAAOC,MAAMhC,UAAUxB,MAAM0B,KAAK+B,WAElCC,EAAWH,EAAK,GAGhBI,EAA+B,kBAAdD,EAA0BA,EAAWA,EAAS,GAE1DnB,EAAI,EAAGA,EAAIgB,EAAKf,OAAQD,IAC3BgB,EAAKhB,IAAMgB,EAAKhB,GAAGpB,MAAyB,aAAjBoC,EAAKhB,GAAGpB,KACrCwC,GAAUJ,EAAKhB,GAAGV,IAAIgB,OAAOC,KAE7Ba,GAAUJ,EAAKhB,GAGjBoB,GAAUD,EAASnB,GAGrB,OAAOxB,EAAc4C,GAIvBL,EAAIM,QAAUN,EACdA,EAAIO,YAzJJ,WACElD,EAAW,GACXC,EAAoB,IAwJtB0C,EAAIQ,wBAvGJ,WACEjD,GAAwB,GAuG1ByC,EAAIS,oCAlCJ,WACEjD,GAAgC,GAkClCwC,EAAIU,qCA/BJ,WACElD,GAAgC,GAgClCmD,EAAOC,QAAUZ,G,uJCtKjB,aAUE,WAAYa,EAAmCC,GATxC,KAAAC,WAAqB,EACrB,KAAAC,gBAA2C,GAG3C,KAAAF,QAA8B,GAG7B,KAAAD,QAAmC,GAGzCI,KAAKJ,QAAUA,GAAY,GAC3BI,KAAKH,QAAUA,GAAW,GA2D9B,OAxDS,YAAAI,WAAP,WACE,OAAOD,KAAKJ,SAGP,YAAAM,WAAP,SACEC,EACAC,QAAA,IAAAA,OAAA,GAEIA,IAAkBC,YAAQL,KAAKJ,QAASO,KAC1CH,KAAKD,gBAAkBC,KAAKJ,SAE9BI,KAAKJ,QAAUO,GAOP,YAAAG,QAAV,WACEN,KAAKF,WAAY,GAGT,YAAAS,cAAV,WACE,IAAMC,EACHR,KAAKJ,SAAWI,KAAKJ,QAAQY,QAC7BR,KAAKH,SAAWG,KAAKH,QAAQW,OAI9B,mBAKF,IAAIC,GAAQ,EAMZ,OALID,IAAWR,KAAKQ,SAClBC,GAAQ,EACRT,KAAKQ,OAASA,EACdR,KAAKU,WAEA,CACLF,OAAQR,KAAKQ,OACbC,MAAK,IAIC,YAAAE,mBAAV,SAA6BC,EAAwBC,GACnD,IAAMC,EAAY,YAAOF,GACK,YAAcC,GAClB,YAAcC,EAAUD,MAEtC,YACG,eAInB,EAvEA,GCaA,cAQE,WAAY,G,IACVjB,EAAA,EAAAA,QACAC,EAAA,EAAAA,QACAkB,EAAA,EAAAA,UAHF,EASE,YAAMnB,EAASC,IAAQ,K,OAdjB,EAAAmB,aAAqD,GACrD,EAAAC,kBAA+D,GAC/D,EAAAC,SAAmB,EAoGnB,EAAAC,aAAe,SAACvB,GACtB,EAAKc,UACL,EAAKQ,SAAU,EACf,EAAKE,YAAcxB,EACnB,EAAKmB,aAGC,EAAAM,iBAAmB,WACzB,IAAMjC,EAAS,EAAKkC,iBAEpB,OADA,EAAKC,yBACEnC,GA8SD,EAAAoC,WAAa,SAACC,GACpB,SAAKR,kBAAkBS,MAAOC,QAAQF,IAEhC,EAAAG,aAAe,SACrBC,GAEG,SAAKZ,kBAAkBS,MAAOI,UAAUD,IAErC,EAAAE,eAAiB,SACvBC,GAIG,SAAKf,kBAAkBS,MAAOO,YAAYD,IAEvC,EAAAE,gBAAkB,SAACC,GACzB,EAAKlB,mBACH,EAAKA,kBAAkBS,OACvB,EAAKT,kBAAkBS,MAAOU,aAAaD,IAGvC,EAAAE,eAAiB,WACvB,EAAKpB,mBACH,EAAKA,kBAAkBS,OACvB,EAAKT,kBAAkBS,MAAOY,eAG1B,EAAAC,mBAAqB,SAI3B3C,GAKG,SAAKqB,kBAAkBS,MAAOc,gBAAgB5C,IAnbjD,EAAKmB,UAAYA,E,EAicrB,OAndkD,iBAqBzC,YAAA0B,QAAP,WACEzC,KAAKO,gBAEC,wBAAEmC,EAAA,EAAAA,KAAMhB,EAAA,EAAAA,MAUd,OATIgB,GAAQhB,IAAU1B,KAAKgB,aAAaU,SACtC1B,KAAK2C,0BACL3C,KAAKgB,aAAaU,MAAQA,GAG5B1B,KAAK4C,wBAED5C,KAAKF,WAAWE,KAAKuB,yBAElBvB,KAAK6C,uBAAyB7C,KAAKqB,oBAGrC,YAAAyB,YAAP,WACE,OAAQ9C,KAAKkB,QAUT,CAAClB,KAAKmB,aAAcnB,KAAKyC,WATzB,CACEzC,KAAKmB,aACL,CACE4B,SAAS,EACTC,cAAe,IAAcC,MAC7BC,QAAQ,EACRC,UAAMC,KAOT,YAAAC,UAAP,WACE,IAAMzD,EAAUI,KAAKC,aACrB,GAAIL,EAAQ8C,OAAwB,IAAhB9C,EAAQ0D,IAAe,OAAO,EAGlD,IAAMC,EAAMvD,KAAKiB,kBAAkBS,MAEnC,QADsB6B,EAAIC,mBACLT,SAAUQ,EAAInE,UAG9B,YAAAqE,aAAP,SAAoB,G,IAAE,oBAAAC,YAAA,IAAO,GAAP,EAQpB,OAPA1D,KAAKF,WAAY,EAEZ4D,IAAQ1D,KAAKkB,SAChBlB,KAAK2D,yBAGP3D,KAAKD,gBAAkBC,KAAKC,aACrBD,KAAKM,QAAQsD,KAAK5D,OAGpB,YAAAU,QAAP,WACEV,KAAK2C,iCACE3C,KAAKiB,kBAAkBS,aACvB1B,KAAKgB,aAAa5B,QAGpB,YAAAa,WAAP,WACE,IAAML,EAAU,YAAMK,WAAU,WAkBhC,OAhBID,KAAKoB,cACPxB,EAAQ6B,UAAS,2BACZ7B,EAAQ6B,WACRzB,KAAKoB,YAAYK,WAEtB7B,EAAQC,QAAO,2BACVD,EAAQC,SACRG,KAAKoB,YAAYvB,UAKpBG,KAAKkB,gBACAtB,EAAQ8C,KAGV9C,GAGF,YAAAiE,aAAP,WACE,OAAO7D,KAAKH,SAAWG,KAAKH,QAAQiE,gBAgB9B,YAAAjB,oBAAR,WACE,IAoBIzD,EApBE2E,GAAwC,IAA1B/D,KAAKC,aAAaqD,IAChCU,EAAgBhE,KAAKO,gBAAgBC,OAAOyD,sBAE5CC,EAAa,aACjBnB,SAAS,EACTC,cAAe,IAAcD,QAC7BG,QAAQ,EACRC,UAAMC,EACNe,OAAO,EACP3D,OAAQR,KAAKQ,QACVR,KAAKoE,yBAKV,OAAIL,IAAgB/D,KAAK6D,gBAAkBG,IACzChE,KAAKgB,aAAa5B,OAAS8E,EACpBA,IAILlE,KAAK6D,iBACPzE,EACEY,KAAKH,QAAQiE,eAAgBO,gBAC3BrE,KACAA,KAAKqB,mBACF6C,GAGF9E,IAGD,YAAAkF,8BAAR,WACE,IAAM1E,EAAUI,KAAKC,aACrBD,KAAKW,mBAAmBf,EAAQ8B,MAAO,IAAa6C,OACpD,IAAMC,EAAc5E,EAAQ4E,aAAe,QAY3C,OAPExE,KAAK6D,gBACoB,iBAAxBjE,EAAQ6E,aACiB,sBAAxB7E,EAAQ6E,cAEV7E,EAAQ6E,YAAc,eAGxB,2BACK7E,GAAO,CACV4E,YAAW,EACX3E,QAASD,EAAQC,QACjB6E,SAAU,CAAEC,eAAgB,CAAEH,YAAW,OAIrC,YAAAI,0BAAR,W,QAUE,GANI5E,KAAK6D,iBACP7D,KAAKiB,kBAAkBS,MAAQ1B,KAAKH,QAASiE,eAAgBe,iBAC3D7E,KAAKC,gBAIJD,KAAKiB,kBAAkBS,MAAO,CACjC,IAAMoD,EAAyB9E,KAAKsE,gCAEpCtE,KAAKgB,aAAa8D,uBAAsB,2BACnCA,GAAsB,CACzBC,SAAU,OAEZ/E,KAAKiB,kBAAkBS,MAAQ1B,KAAKO,gBAAgBC,OAAOwE,WAAU,eAChEF,IAGD9E,KAAK6D,iBACqB,QAA5B,EAAY,QAAZ,EAAA7D,KAAKH,eAAO,eAAEiE,sBAAc,SAAEmB,sBAC5BjF,KAAKiB,kBAAkBS,MACvBoD,MAMA,YAAAlC,sBAAR,WAEE,GAAK5C,KAAKiB,kBAAkBS,MAA5B,CAKA,IAAMwD,EAA4B,OAAH,IAAG,CAAH,eAC1BlF,KAAKsE,iCAA+B,CACvCS,SAAU,OAIT1E,YACC6E,EACAlF,KAAKgB,aAAa8D,0BAGpB9E,KAAKgB,aAAa8D,uBAAyBI,EAC3ClF,KAAKiB,kBACFS,MAAOxB,WAAWgF,GAKlBC,OAAM,qBAtBTnF,KAAK4E,6BA0BD,YAAArD,uBAAR,sBACE,IAAIvB,KAAKiB,kBAAkBmE,eAAgBpF,KAAKC,aAAayC,KAA7D,CAEA,IAAM2C,EAAWrF,KAAKiB,kBAAkBS,MACxC1B,KAAKiB,kBAAkBmE,aAAeC,EAASC,UAAU,CACvDC,KAAM,SAAC,G,IAAExC,EAAA,EAAAA,QAASC,EAAA,EAAAA,cAAeG,EAAA,EAAAA,KACzBqC,EAAiB,EAAKxE,aAAa5B,OAIvCoG,GACAA,EAAezC,UAAYA,GAC3ByC,EAAexC,gBAAkBA,GACjC3C,YAAQmF,EAAerC,KAAMA,IAK/B,EAAKpC,aAEP0E,MAAO,SAAC,GAEN,GADA,EAAKC,sBACA,EAAM9H,eAAe,iBAAkB,MAAM,EAElD,IAAM4H,EAAiB,EAAKxE,aAAa5B,QAEtCoG,GAAkBA,EAAezC,UACjC1C,YAAQ,EAAO,EAAKW,aAAayE,UAElC,EAAKzE,aAAayE,MAAQ,EAC1B,EAAK1E,kBAML,YAAA2E,mBAAR,WACE1F,KAAK2C,0BASL,IAAMgD,EAAY3F,KAAKiB,kBAAkBS,MAAOkE,eAC1CC,EAAa7F,KAAKiB,kBAAkBS,MAAOoE,gBACjD9F,KAAKiB,kBAAkBS,MAAOqE,mBAC9B/F,KAAKuB,yBACL7F,OAAOsK,OAAOhG,KAAKiB,kBAAkBS,MAAQ,CAC3CiE,UAAS,EACTE,WAAU,KAIN,YAAAvE,eAAR,WACE,IAAIlC,EAAcY,KAAKoE,wBACjBxE,EAAUI,KAAKC,aAKrB,GAAIL,EAAQ8C,KACVtD,EAAS,OAAH,IAAG,CAAH,eACDA,GAAM,CACT+D,UAAMC,EACNqC,WAAOrC,EACPL,SAAS,EACTG,QAAQ,QAEL,CAEL,IAAM+C,EAAgBjG,KAAKiB,kBAAkBS,MAAO8B,mBAC5CT,EAAA,EAAAA,QAASmD,EAAA,EAAAA,QAASlD,EAAA,EAAAA,cAAemD,EAAA,EAAAA,OACnCV,EAAA,EAAAA,MAAOtC,EAAA,EAAAA,KAgBb,GAZIgD,GAAUA,EAAOlI,OAAS,IAC5BwH,EAAQ,IAAI,IAAY,CAAEW,cAAeD,KAG3C/G,EAAS,OAAH,IAAG,CAAH,eACDA,GAAM,CACT2D,QAAO,EACPC,cAAa,EACbyC,MAAK,EACLvC,QAAQ,IAGNH,EAAS,CACX,IAAM/B,EACJhB,KAAKgB,aAAa5B,QAAUY,KAAKgB,aAAa5B,OAAO+D,KACvD/D,EAAO+D,KACLnC,GAAgBmC,E,2BAEPnC,GACAmC,GAELnC,GAAgBmC,OACjB,GAAIsC,EACT/J,OAAOsK,OAAO5G,EAAQ,CACpB+D,MAAOnD,KAAKiB,kBAAkBS,MAAOoE,iBAAoB,IACtD3C,WAEA,CACG,IAAAsB,EAAA,qCAAAA,YAER,GADQ,EAAA4B,iBAGLlD,GACD+C,GACgB,eAAhBzB,EAeA,OALA/I,OAAOsK,OAAO5G,EAAQ,CACpB2D,SAAS,EACTC,cAAe,IAAcD,UAE/B3D,EAAOuC,UACAvC,EAGTA,EAAO+D,KAAOA,GAgBlB,OAZA/D,EAAOoB,OAASR,KAAKQ,OACrBR,KAAKgB,aAAa+B,QACf/C,KAAKgB,aAAa5B,QAAUY,KAAKgB,aAAa5B,OAAO2D,UAAY,EACpE/C,KAAKgB,aAAa5B,OAASA,EAM3BY,KAAKiB,kBAAkBS,OACrB1B,KAAKiB,kBAAkBS,MAAM4E,wBAExBlH,GAGD,YAAAuE,uBAAR,WAEE,GADiB3D,KAAKiB,kBAAkBS,OACtB1B,KAAKgB,aAAa5B,OAApC,CAEM,+BAAE+D,EAAA,EAAAA,KAAMJ,EAAA,EAAAA,QAAS0C,EAAA,EAAAA,MAEvB,IAAK1C,EAAS,CACN,wBAAErB,EAAA,EAAAA,MAAOD,EAAA,EAAAA,UAAW8E,EAAA,EAAAA,YAAaC,EAAA,EAAAA,QAGvC,GACExG,KAAKD,kBACJC,KAAKgB,aAAa+B,SACnB1C,YAAQL,KAAKD,gBAAgB2B,MAAOA,IACpCrB,YAAQL,KAAKD,gBAAgB0B,UAAWA,GAExC,OAGE8E,IAAgBd,EAClBc,EAAYpD,GACHqD,GAAWf,GACpBe,EAAQf,MAKN,YAAA9C,wBAAR,WACM3C,KAAKiB,kBAAkBmE,eACzBpF,KAAKiB,kBAAkBmE,aAAaqB,qBAC7BzG,KAAKiB,kBAAkBmE,eA0C1B,YAAAhB,sBAAR,WAEE,MAAO,CACL3C,UAFiBzB,KAAKiB,kBAAkBS,MAElBD,UACtBE,QAAS3B,KAAKwB,WACdM,UAAW9B,KAAK4B,aAChBK,YAAajC,KAAK+B,eAClBK,aAAcpC,KAAKkC,gBACnBI,YAAatC,KAAKqC,eAClBG,gBAAiBxC,KAAKuC,qBAG5B,EAndA,CAAkD,G,SCdlCmE,EACdhF,EACA9B,EACA8D,QAAA,IAAAA,OAAA,GAEA,IAAM7D,EAAU,qBAAW,eACrB,oDAAC8G,EAAA,KAAMC,EAAA,KACPC,EAAiBjH,EAAU,OAAH,IAAG,CAAH,eAAQA,GAAO,CAAE8B,MAAK,IAAK,CAAEA,MAAK,GAE1DoF,EAAe,mBACfC,EACJD,EAAaE,SACb,IAAI,EAA6B,CAC/BpH,QAASiH,EACThH,QAAO,EACPkB,UAAS,WACFgG,EAAUlD,eASb+C,IAJAK,QAAQC,UAAUC,KAAKP,MAS/BG,EAAU7G,WAAW2G,GACrBE,EAAUlH,QAAUA,EAKhBkH,EAAUlD,iBAAmBiD,EAAaE,UAC5CF,EAAaE,QAAUD,GAMzB,IAMM3H,E,SClDNgI,EACA3J,GAEA,IAAM4J,EAAM,mBAMZ,OAJKA,EAAIL,SAAY3G,YAAQ5C,EAAK4J,EAAIL,QAAQvJ,OAC5C4J,EAAIL,QAAU,CAAEvJ,IAAG,EAAE5B,MAAOuL,MAGvBC,EAAIL,QAAQnL,MDyCJyL,EACb,WAAM,OAAC5D,EAAOqD,EAAUjE,cAAgBiE,EAAUtE,YAPvC,CACX7C,QAAS,OAAF,IAAE,CAAF,eAAOiH,GAAc,CAAEL,aAASpD,EAAWmD,iBAAanD,IAC/DvD,QAAO,EACP8G,KAAI,IAQAY,EAAc7D,EACftE,EAAyC,GACzCA,EAmBL,OAjBA,qBAAU,WAOR,OAJK0H,EAAaE,UAChBF,EAAaE,QAAUD,GAGlB,WAAM,OAAAA,EAAUrG,aACtB,IAEH,qBAAU,WAAM,OAAAqG,EAAUtD,aAAa,CAAEC,KAAI,MAAK,CAChD6D,EAAYxE,QACZwE,EAAYvE,cACZuE,EAAY9B,MACZ8B,EAAYpE,OAGP/D,EEzET,kBASE,WAAY,G,IACVQ,EAAA,EAAAA,QACAC,EAAA,EAAAA,QACAT,EAAA,EAAAA,OACAoI,EAAA,EAAAA,UAJF,EAWE,YAAM5H,EAASC,IAAQ,K,OAuBjB,EAAA4H,YAAc,SACpBC,QAAA,IAAAA,MAGI,IAEJ,EAAKC,kBACL,IAAMC,EAAa,EAAKC,wBAExB,OAAO,EAAKC,OAAOJ,GAChBP,MAAK,SAACY,GAEL,OADA,EAAKC,oBAAoBD,EAAUH,GAC5BG,KAER5C,OAAM,SAACM,GAEN,GADA,EAAKwC,gBAAgBxC,EAAOmC,IACvB,EAAK3H,aAAauG,QAAS,MAAMf,MAtC1C,EAAK9E,mBAAmBf,EAAQsI,SAAU,IAAaC,UACvD,EAAK/I,OAASA,EACd,EAAKoI,UAAYA,EACjB,EAAKY,qBAAuB,E,EAiJhC,OAtKU,iBAwBD,YAAA3F,QAAP,SAAerD,GAIb,OAHAY,KAAKF,WAAY,EACjBE,KAAKW,mBAAmBX,KAAKC,aAAaiI,SAAU,IAAaC,UACjE/I,EAAOoB,OAASR,KAAKO,gBAAgBC,OAC9B,CAACR,KAAKyH,YAAarI,IAGrB,YAAAqE,aAAP,WAEE,OADAzD,KAAKF,WAAY,EACVE,KAAKM,QAAQsD,KAAK5D,OAGpB,YAAAU,QAAP,aAwBQ,YAAAoH,OAAR,SACEJ,GAEM,wBACJQ,EAAA,EAAAA,SACAzG,EAAA,EAAAA,UACA4G,EAAA,EAAAA,mBACAC,EAAA,EAAAA,OACA,IAAAzI,QAAA,kBACA,IAAA0I,2BAAA,IAAsB,GAAtB,EACA9D,EAAA,EAAAA,YAEI+D,EAAgB,OAAH,IAAG,CAAH,GAAQd,GAErBe,EAAkB/M,OAAOsK,OAC7B,GACAvE,EACA+G,EAAc/G,WAIhB,cAFO+G,EAAc/G,UAEdzB,KAAKO,gBAAgBC,OAAOsH,OAAM,aACvCI,SAAQ,EACRG,mBAAkB,EAClBK,eACEF,EAAcE,gBAAkB1I,KAAKC,aAAayI,eACpDH,oBAAmB,EACnBD,OAAM,EACNzI,QAAS8I,EACTlE,YAAW,EACXhD,UAAWgH,GACRD,KAIC,YAAAb,gBAAR,WACO3H,KAAKZ,OAAO2D,SAAY/C,KAAKC,aAAa2I,eAC7C5I,KAAK6I,aAAa,CAChB9F,SAAS,EACT0C,WAAOrC,EACPD,UAAMC,EACNF,QAAQ,KAKN,YAAA8E,oBAAR,SACED,EACAH,GAEM,wBAAErB,EAAA,EAAAA,YAAaqC,EAAA,EAAAA,cAEbzF,EAAA,EAAAA,KAAMgD,EAAA,EAAAA,OACRV,EACJU,GAAUA,EAAOlI,OAAS,EACtB,IAAI,IAAY,CAAEmI,cAAeD,SACjC/C,EAKFpD,KAAK8I,qBAAqBlB,KAAgBgB,GAC5C5I,KAAK6I,aAAa,CAChB3F,QAAQ,EACRH,SAAS,EACTI,KAAI,EACJsC,MAAK,IAPPc,GAAcA,EAAYpD,IAatB,YAAA8E,gBAAR,SAAwBxC,EAAoBmC,GAClC,IAAApB,EAAA,kBAAAA,QAEJxG,KAAK8I,qBAAqBlB,IAC5B5H,KAAK6I,aAAa,CAChB9F,SAAS,EACT0C,MAAK,EACLtC,UAAMC,EACNF,QAAQ,IAIRsD,GACFA,EAAQf,IAIJ,YAAAoC,sBAAR,WACE,QAAS7H,KAAKoI,sBAGR,YAAAU,qBAAR,SAA6BlB,GAC3B,OAAO5H,KAAKoI,uBAAyBR,GAG/B,YAAAiB,aAAR,SAAqBzJ,IAEjBY,KAAKF,WACHE,KAAKwF,gBAAmBnF,YAAQL,KAAKwF,eAAgBpG,KAEvDY,KAAKwH,UAAUpI,GACfY,KAAKwF,eAAiBpG,IAG5B,EAzKA,CAGU,GCXV,kBAOE,WAAY,G,IACVQ,EAAA,EAAAA,QACAC,EAAA,EAAAA,QACA2H,EAAA,EAAAA,UAHF,EASE,YAAM5H,EAASC,IAAQ,K,OAXjB,EAAAoB,kBAAmD,GAYzD,EAAKuG,UAAYA,EACjB,EAAKuB,WAAWnJ,G,EA0HpB,OAzIU,iBAkBD,YAAA6C,QAAP,SAAerD,GACb,IAA+B,IAA3BY,KAAKC,aAAayC,KAEpB,OADA1C,KAAKU,UACE,CACLqC,SAAS,EACT0C,WAAOrC,EACPD,UAAMC,EACN3B,UAAWzB,KAAKC,aAAawB,WAIjC,IAAIwE,EAAgB7G,EAChBY,KAAKO,gBAAgBE,QACvBwF,EAAgBjG,KAAKgJ,oBAGjB,IAAAC,EAAA,kBAAAA,kBAqBN,MApBiC,oBAAtBA,IACTA,IAAsBA,EAAkBjJ,KAAKC,gBAIvB,IAAtBgJ,GACAjJ,KAAKD,iBACLrE,OAAOiC,KAAKqC,KAAKD,iBAAiB9B,OAAS,IAC1C+B,KAAKD,gBAAgBqF,eAAiBpF,KAAKC,aAAamF,eACtD/E,YAAQL,KAAKD,gBAAgB0B,UAAWzB,KAAKC,aAAawB,YAC3DzB,KAAKD,gBAAgB2C,OAAS1C,KAAKC,aAAayC,QAElD1C,KAAKU,UACLuF,EAAgBjG,KAAKgJ,oBAGvBhJ,KAAK+I,WAAW/I,KAAKC,cACrBD,KAAKkJ,oBAELlJ,KAAKD,gBAAkBC,KAAKC,aAC5B,2BAAYgG,GAAa,CAAExE,UAAWzB,KAAKC,aAAawB,aAGnD,YAAAgC,aAAP,WACEzD,KAAKF,WAAY,GAGZ,YAAAY,QAAP,WACEV,KAAKmJ,yBACEnJ,KAAKiB,kBAAkBS,OAGxB,YAAAqH,WAAR,SAAmBnJ,GACbI,KAAKiB,kBAAkBS,QAAoC,IAA3B1B,KAAKC,aAAayC,OACtD1C,KAAKiB,kBAAkBS,MAAQ1B,KAAKO,gBAAgBC,OAAO8E,UAAU,CACnE5D,MAAO9B,EAAQwF,aACf3D,UAAW7B,EAAQ6B,UACnBgD,YAAa7E,EAAQ6E,gBAIjB,YAAAyE,kBAAR,WACMlJ,KAAKiB,kBAAkBmE,eAC3BpF,KAAKiB,kBAAkBmE,aAAepF,KAAKiB,kBAAkBS,MAAO4D,UAClE,CACEC,KAAMvF,KAAKoJ,kBAAkBxF,KAAK5D,MAClCyF,MAAOzF,KAAKqJ,YAAYzF,KAAK5D,MAC7BsJ,SAAUtJ,KAAKuJ,qBAAqB3F,KAAK5D,UAKvC,YAAAgJ,iBAAR,WACE,MAAO,CACLjG,SAAS,EACT0C,WAAOrC,EACPD,UAAMC,IAIF,YAAAyF,aAAR,SAAqBzJ,GACfY,KAAKF,WACPE,KAAKwH,UAAUpI,IAIX,YAAAgK,kBAAR,SAA0BhK,GAChB,IAAAoK,EAAA,kBAAAA,mBAERxJ,KAAK6I,aAAa,CAChB1F,KAAM/D,EAAO+D,KACbJ,SAAS,EACT0C,WAAOrC,IAGLoG,GACFA,EAAmB,CACjBhJ,OAAQR,KAAKO,gBAAgBC,OAC7BiJ,iBAAkBrK,KAKhB,YAAAiK,YAAR,SAAoB5D,GAClBzF,KAAK6I,aAAa,CAChBpD,MAAK,EACL1C,SAAS,KAIL,YAAAwG,qBAAR,WACU,IAAAG,EAAA,kBAAAA,uBACJA,GAAwBA,IAC5B1J,KAAKmJ,mBAGC,YAAAA,gBAAR,WACMnJ,KAAKiB,kBAAkBmE,eACzBpF,KAAKiB,kBAAkBmE,aAAaqB,qBAC7BzG,KAAKiB,kBAAkBmE,eAGpC,EA5IA,CAGU,ICQV,wBAEU,KAAAuE,cAAgB,IAAIC,IAMpB,KAAAC,cAAgB,IAAID,IAGrB,YAAA3E,sBAAP,SACE6E,EACAC,GAEA/J,KAAKgK,gBAAgBD,GAAOD,WAAaA,GAIpC,YAAAjF,iBAAP,SACEkF,GAEA,OAAO/J,KAAKgK,gBAAgBD,GAAOD,YAG9B,YAAAzF,gBAAP,SACE4F,EACAC,GAGA,OADalK,KAAKgK,gBAAgBC,EAAchK,cACtCkK,KAWHD,KAVLlK,KAAK2J,cAAcS,IACjBH,EAAchK,aACd,IAAIgH,SAAQ,SAAAC,GACVA,EAAQ+C,EAAc5G,iBAKnB,OAKJ,YAAAgH,YAAP,WACE,OAAOrK,KAAK2J,cAAcW,KAAO,GAG5B,YAAAC,wBAAP,sBACQC,EAA2B,GAejC,OAdAxK,KAAK2J,cAAcc,SAAQ,SAACC,EAAST,GAUnC,EAAKD,gBAAgBC,GAAeE,MAAO,EAC3CK,EAAS3L,KAAK6L,MAEhB1K,KAAK2J,cAAcgB,QACZ1D,QAAQ2D,IAAIJ,IAGb,YAAAR,gBAAR,SACED,GAEQ,IAAAF,EAAA,KAAAA,cACAnI,EAAA,EAAAA,MAAOD,EAAA,EAAAA,UACToJ,EAAShB,EAAciB,IAAIpJ,IAAU,IAAIkI,IAC1CC,EAAckB,IAAIrJ,IAAQmI,EAAcO,IAAI1I,EAAOmJ,GACxD,IAAMG,EAAkBC,KAAKC,UAAUzJ,GACjC0J,EAAON,EAAOC,IAAIE,IAjFnB,CACLb,MAAM,EACNL,WAAY,MAiFZ,OADKe,EAAOE,IAAIC,IAAkBH,EAAOT,IAAIY,EAAiBG,GACvDA,GA7EX,O,0BCXgB,EACdpB,GAEQ,IAAAhF,EAAA,EAAAA,SACF3F,E,SCHNsC,EACA9B,GAEA,OAAO8G,EAAgChF,EAAO9B,GAAS,GDAxCwL,CADG,EAAA1J,MAAO,qCAEzB,OAAOqD,GAAY3F,EAAS2F,EAAS3F,GAAU,K,SELjC,EACd2K,GAEM,M,SCDN7B,EACAtI,GAEA,IAAMC,EAAU,qBAAW,eACrB,6CAACT,EAAA,KAAQoI,EAAA,KACTX,EAAiBjH,EAAU,OAAH,IAAG,CAAH,eAAQA,GAAO,CAAEsI,SAAQ,IAAK,CAAEA,SAAQ,GAEhEmD,EAAkB,mBAalBC,GAXCD,EAAgBrE,UACnBqE,EAAgBrE,QAAU,IAAI,EAAgC,CAC5DpH,QAASiH,EACThH,QAAO,EACPT,OAAM,EACNoI,UAAS,KAGN6D,EAAgBrE,SASzB,OALAsE,EAAapL,WAAW2G,GACxByE,EAAazL,QAAUA,EAEvB,qBAAU,WAAM,OAAAyL,EAAa7H,kBAEtB6H,EAAa7I,QAAQrD,GDzBtB,eAACqI,EAAA,KAAarI,EAAA,KACpB,OAAO2K,EAAMhF,SAAWgF,EAAMhF,SAAS0C,EAAarI,GAAU,K,SEJhD,EACd2K,GAEA,IAAM3K,E,SCDNgG,EACAxF,GAEA,IAAMC,EAAU,qBAAW,eACrBgH,EAAiBjH,E,2BACdA,GAAO,CAAEwF,aAAY,IAC1B,CAAEA,aAAY,GACZ,sB,2CAAChG,EAAA,KAAQoI,EAAA,KAMT+D,EAAsB,mBAYtB9B,GAVC8B,EAAoBvE,UACvBuE,EAAoBvE,QAAU,IAAI,EAAoC,CACpEpH,QAASiH,EACThH,QAAO,EACP2H,UAAS,KAGN+D,EAAoBvE,SAU7B,OANAyC,EAAiBvJ,WAAW2G,GAAgB,GAC5C4C,EAAiB5J,QAAUA,EAE3B,qBAAU,WAAM,OAAA4J,EAAiBhG,kBACjC,qBAAU,WAAM,OAAAgG,EAAiB/I,QAAQkD,KAAK6F,KAAmB,IAE1DA,EAAiBhH,QAAQrD,GD/BjBoM,CAAgBzB,EAAM3E,aAAc2E,GACnD,OAAOA,EAAMhF,UAAY3F,EAAS2K,EAAMhF,SAAS3F,GAAU,MJI5C,MAAK,KACPqM,UAAY,CACvBjL,OAAQ,IAAUkL,OAClB3G,SAAU,IAAU4G,KAAKC,WACzBnH,YAAa,IAAUxI,OACvB4P,4BAA6B,IAAUC,KACvCvF,YAAa,IAAUoF,KACvBnF,QAAS,IAAUmF,KACnBxJ,aAAc,IAAU4J,OACxBrK,MAAO,IAAUgK,OAAOE,WACxBnK,UAAW,IAAUiK,OACrBpI,IAAK,IAAUwI,KACfzF,eAAgB,IAAUyF,KAC1BE,kBAAmB,IAAUF,OEdhB,MAAQ,KACVL,UAAY,CACvBvD,SAAU,IAAUwD,OAAOE,WAC3BnK,UAAW,IAAUiK,OACrBrD,mBAAoB,IAAU4D,UAAU,CAAC,IAAUP,OAAQ,IAAUC,OACrEjD,eAAgB,IAAUuD,UAAU,CAClC,IAAUC,QACR,IAAUD,UAAU,CAAC,IAAUhQ,OAAQ,IAAUyP,UAEnD,IAAUC,OAEZpD,oBAAqB,IAAUuD,KAC/BxD,OAAQ,IAAUqD,KAClB5G,SAAU,IAAU4G,KAAKC,WACzBrF,YAAa,IAAUoF,KACvBnF,QAAS,IAAUmF,KACnBlH,YAAa,IAAUxI,SEhBV,MAAY,KACdwP,UAAY,CACvBrG,aAAc,IAAUsG,OAAOE,WAC/BnK,UAAW,IAAUiK,OACrB3G,SAAU,IAAU4G,KACpBnC,mBAAoB,IAAUmC,KAC9BjC,uBAAwB,IAAUiC,KAClC1C,kBAAmB,IAAUgD,UAAU,CAAC,IAAUN,KAAM,IAAUG","file":"static/js/0.198c6308.chunk.js","sourcesContent":["export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","var parser = require('graphql/language/parser');\n\nvar parse = parser.parse;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\n// A map docString -> graphql document\nvar docCache = {};\n\n// A map fragmentName -> [normalized source]\nvar fragmentSourceMap = {};\n\nfunction cacheKeyFromLoc(loc) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// For testing.\nfunction resetCaches() {\n  docCache = {};\n  fragmentSourceMap = {};\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nvar printFragmentWarnings = true;\nfunction processFragments(ast) {\n  var astFragmentMap = {};\n  var definitions = [];\n\n  for (var i = 0; i < ast.definitions.length; i++) {\n    var fragmentDefinition = ast.definitions[i];\n\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n\n      // We know something about this fragment\n      if (fragmentSourceMap.hasOwnProperty(fragmentName) && !fragmentSourceMap[fragmentName][sourceKey]) {\n\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n\n      } else if (!fragmentSourceMap.hasOwnProperty(fragmentName)) {\n        fragmentSourceMap[fragmentName] = {};\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n      }\n\n      if (!astFragmentMap[sourceKey]) {\n        astFragmentMap[sourceKey] = true;\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  }\n\n  ast.definitions = definitions;\n  return ast;\n}\n\nfunction disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nfunction stripLoc(doc, removeLocAtThisLevel) {\n  var docType = Object.prototype.toString.call(doc);\n\n  if (docType === '[object Array]') {\n    return doc.map(function (d) {\n      return stripLoc(d, removeLocAtThisLevel);\n    });\n  }\n\n  if (docType !== '[object Object]') {\n    throw new Error('Unexpected input.');\n  }\n\n  // We don't want to remove the root loc field so we can use it\n  // for fragment substitution (see below)\n  if (removeLocAtThisLevel && doc.loc) {\n    delete doc.loc;\n  }\n\n  // https://github.com/apollographql/graphql-tag/issues/40\n  if (doc.loc) {\n    delete doc.loc.startToken;\n    delete doc.loc.endToken;\n  }\n\n  var keys = Object.keys(doc);\n  var key;\n  var value;\n  var valueType;\n\n  for (key in keys) {\n    if (keys.hasOwnProperty(key)) {\n      value = doc[keys[key]];\n      valueType = Object.prototype.toString.call(value);\n\n      if (valueType === '[object Object]' || valueType === '[object Array]') {\n        doc[keys[key]] = stripLoc(value, true);\n      }\n    }\n  }\n\n  return doc;\n}\n\nvar experimentalFragmentVariables = false;\nfunction parseDocument(doc) {\n  var cacheKey = normalize(doc);\n\n  if (docCache[cacheKey]) {\n    return docCache[cacheKey];\n  }\n\n  var parsed = parse(doc, { experimentalFragmentVariables: experimentalFragmentVariables });\n  if (!parsed || parsed.kind !== 'Document') {\n    throw new Error('Not a valid GraphQL document.');\n  }\n\n  // check that all \"new\" fragments inside the documents are consistent with\n  // existing fragments of the same name\n  parsed = processFragments(parsed);\n  parsed = stripLoc(parsed, false);\n  docCache[cacheKey] = parsed;\n\n  return parsed;\n}\n\nfunction enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nfunction disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nfunction gql(/* arguments */) {\n  var args = Array.prototype.slice.call(arguments);\n\n  var literals = args[0];\n\n  // We always get literals[0] and then matching post literals for each arg given\n  var result = (typeof(literals) === \"string\") ? literals : literals[0];\n\n  for (var i = 1; i < args.length; i++) {\n    if (args[i] && args[i].kind && args[i].kind === 'Document') {\n      result += args[i].loc.source.body;\n    } else {\n      result += args[i];\n    }\n\n    result += literals[i];\n  }\n\n  return parseDocument(result);\n}\n\n// Support typescript, which isn't as nice as Babel about default exports\ngql.default = gql;\ngql.resetCaches = resetCaches;\ngql.disableFragmentWarnings = disableFragmentWarnings;\ngql.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;\ngql.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;\n\nmodule.exports = gql;\n","import { ApolloClient } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nimport {\n  ApolloContextValue,\n  parser,\n  DocumentType,\n  operationName\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { CommonOptions } from '../types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: ApolloContextValue = {};\n  public client: ApolloClient<object> | undefined;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: ApolloContextValue) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !isEqual(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import {\n  ApolloQueryResult,\n  ApolloError,\n  NetworkStatus,\n  FetchMoreOptions,\n  FetchMoreQueryOptions,\n  UpdateQueryOptions,\n  SubscribeToMoreOptions,\n} from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  QueryResult,\n  ObservableQueryFields,\n} from '@apollo/react-common';\n\nimport {\n  QueryPreviousData,\n  QueryOptions,\n  QueryCurrentObservable,\n  QueryTuple,\n  QueryLazyOptions,\n} from '../types';\nimport { OperationData } from './OperationData';\n\nexport class QueryData<TData, TVariables> extends OperationData {\n  public onNewData: () => void;\n\n  private previousData: QueryPreviousData<TData, TVariables> = {};\n  private currentObservable: QueryCurrentObservable<TData, TVariables> = {};\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n\n  constructor({\n    options,\n    context,\n    onNewData,\n  }: {\n    options: QueryOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    if (this.isMounted) this.startQuerySubscription();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined,\n          } as QueryResult<TData, TVariables>,\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<ApolloQueryResult<any>> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n\n    // currentObservable.query is already assigned the registered SSR observable in initializeObservableQuery.\n    const obs = this.currentObservable.query!;\n    const currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables,\n      };\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context,\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteResult = (): QueryResult<TData, TVariables> => {\n    const result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  private getExecuteSsrResult() {\n    const ssrDisabled = this.getOptions().ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    let result;\n    if (this.ssrInitiated()) {\n      result =\n        this.context.renderPromises!.addQueryPromise(\n          this,\n          this.getExecuteResult\n        ) || ssrLoading;\n    }\n\n    return result;\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n      metadata: { reactComponent: { displayName } },\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable.query = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable.query) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previousData.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: null,\n      };\n      this.currentObservable.query = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions,\n      });\n\n      if (this.ssrInitiated()) {\n        this.context?.renderPromises?.registerSSRObservable(\n          this.currentObservable.query,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: null,\n    };\n\n    if (\n      !isEqual(\n        newObservableQueryOptions,\n        this.previousData.observableQueryOptions\n      )\n    ) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .query!.setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  private startQuerySubscription() {\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n\n    const obsQuery = this.currentObservable.query!;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previousData.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          isEqual(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        this.onNewData();\n      },\n      error: (error) => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previousData.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !isEqual(error, this.previousData.error)\n        ) {\n          this.previousData.error = error;\n          this.onNewData();\n        }\n      },\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const lastError = this.currentObservable.query!.getLastError();\n    const lastResult = this.currentObservable.query!.getLastResult();\n    this.currentObservable.query!.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query!, {\n      lastError,\n      lastResult,\n    });\n  }\n\n  private getQueryResult(): QueryResult<TData, TVariables> {\n    let result: any = this.observableQueryFields();\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true,\n      };\n    } else {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.query!.getCurrentResult();\n      const { loading, partial, networkStatus, errors } = currentResult;\n      let { error, data } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        loading,\n        networkStatus,\n        error,\n        called: true,\n      };\n\n      if (loading) {\n        const previousData =\n          this.previousData.result && this.previousData.result.data;\n        result.data =\n          previousData && data\n            ? {\n                ...previousData,\n                ...data,\n              }\n            : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query!.getLastResult() || ({} as any))\n            .data,\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.query!.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          !data &&\n          partial &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading,\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading =\n      (this.previousData.result && this.previousData.result.loading) || false;\n    this.previousData.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable.query &&\n      this.currentObservable.query.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    const obsQuery = this.currentObservable.query;\n    if (!obsQuery || !this.previousData.result) return;\n\n    const { data, loading, error } = this.previousData.result;\n\n    if (!loading) {\n      const { query, variables, onCompleted, onError } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previousData.loading &&\n        isEqual(this.previousOptions.query, query) &&\n        isEqual(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n\n  private obsRefetch = (variables?: TVariables) =>\n    this.currentObservable.query!.refetch(variables);\n\n  private obsFetchMore = <K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable.query!.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable.query!.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable.query!.subscribeToMore(options);\n\n  private observableQueryFields() {\n    const observable = this.currentObservable.query!;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore,\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import { useContext, useEffect, useReducer, useRef } from 'react';\nimport {\n  getApolloContext,\n  OperationVariables,\n  QueryResult,\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions, QueryOptions, QueryTuple } from '../types';\nimport { QueryData } from '../data/QueryData';\nimport { useDeepMemo } from './useDeepMemo';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer((x) => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData =\n    queryDataRef.current ||\n    new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask.\n          Promise.resolve().then(forceUpdate);\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      },\n    });\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // SSR won't trigger the effect hook below that stores the current\n  // `QueryData` instance for future renders, so we'll handle that here if\n  // the current render is happening server side.\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: { ...updatedOptions, onError: undefined, onCompleted: undefined },\n    context,\n    tick,\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  useEffect(() => {\n    // We only need one instance of the `QueryData` class, so we'll store it\n    // as a ref to make it available on subsequent renders.\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return () => queryData.cleanup();\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n  ]);\n\n  return result;\n}\n","import { useRef } from 'react';\nimport { equal as isEqual } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !isEqual(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import { ApolloError } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  OperationVariables,\n  ExecutionResult,\n  MutationFunctionOptions,\n  MutationResult\n} from '@apollo/react-common';\n\nimport { MutationOptions, MutationTuple } from '../types';\nimport { OperationData } from './OperationData';\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables\n> extends OperationData {\n  private mostRecentMutationId: number;\n  private result: MutationResult<TData>;\n  private previousResult?: MutationResult<TData>;\n  private setResult: (result: MutationResult<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    result: MutationResult<TData>;\n    setResult: (result: MutationResult<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResult<TData>) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result] as MutationTuple<TData, TVariables>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables\n    > = {} as MutationFunctionOptions<TData, TVariables>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: ExecutionResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        this.onMutationError(error, mutationId);\n        if (!this.getOptions().onError) throw error;\n      });\n  };\n\n  private mutate(\n    mutationFunctionOptions: MutationFunctionOptions<TData, TVariables>\n  ) {\n    const {\n      mutation,\n      variables,\n      optimisticResponse,\n      update,\n      context: mutationContext = {},\n      awaitRefetchQueries = false,\n      fetchPolicy\n    } = this.getOptions();\n    const mutateOptions = { ...mutationFunctionOptions };\n\n    const mutateVariables = Object.assign(\n      {},\n      variables,\n      mutateOptions.variables\n    );\n    delete mutateOptions.variables;\n\n    return this.refreshClient().client.mutate({\n      mutation,\n      optimisticResponse,\n      refetchQueries:\n        mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries,\n      update,\n      context: mutationContext,\n      fetchPolicy,\n      variables: mutateVariables,\n      ...mutateOptions\n    });\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: ExecutionResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    const { onError } = this.getOptions();\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResult<TData>) {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !isEqual(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  }\n}\n","import { equal as isEqual } from '@wry/equality';\nimport { ApolloContextValue, SubscriptionResult } from '@apollo/react-common';\n\nimport { OperationData } from './OperationData';\nimport { SubscriptionCurrentObservable, SubscriptionOptions } from '../types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    let currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.getOptions();\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (this.previousOptions.subscription !== this.getOptions().subscription ||\n        !isEqual(this.previousOptions.variables, this.getOptions().variables) ||\n        this.previousOptions.skip !== this.getOptions().skip)\n    ) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n\n    this.previousOptions = this.getOptions();\n    return { ...currentResult, variables: this.getOptions().variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n  }\n\n  public cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionOptions<TData, TVariables>) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const { onSubscriptionData } = this.getOptions();\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    const { onSubscriptionComplete } = this.getOptions();\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n","import { ObservableQuery } from 'apollo-client';\nimport { QueryOptions } from '../types';\nimport { DocumentNode } from 'graphql';\nimport { QueryData } from '../data/QueryData';\n\ntype QueryInfo = {\n  seen: boolean;\n  observable: ObservableQuery<any, any> | null;\n};\n\nfunction makeDefaultQueryInfo(): QueryInfo {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nexport class RenderPromises {\n  // Map from Query component instances to pending fetchData promises.\n  private queryPromises = new Map<QueryOptions<any, any>, Promise<any>>();\n\n  // Two-layered map from (query document, stringified variables) to QueryInfo\n  // objects. These QueryInfo objects are intended to survive through the whole\n  // getMarkupFromTree process, whereas specific Query instances do not survive\n  // beyond a single call to renderToStaticMarkup.\n  private queryInfoTrie = new Map<DocumentNode, Map<string, QueryInfo>>();\n\n  // Registers the server side rendered observable.\n  public registerSSRObservable<TData, TVariables>(\n    observable: ObservableQuery<any, TVariables>,\n    props: QueryOptions<TData, TVariables>\n  ) {\n    this.lookupQueryInfo(props).observable = observable;\n  }\n\n  // Get's the cached observable that matches the SSR Query instances query and variables.\n  public getSSRObservable<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ) {\n    return this.lookupQueryInfo(props).observable;\n  }\n\n  public addQueryPromise<TData, TVariables>(\n    queryInstance: QueryData<TData, TVariables>,\n    finish: () => React.ReactNode\n  ): React.ReactNode {\n    const info = this.lookupQueryInfo(queryInstance.getOptions());\n    if (!info.seen) {\n      this.queryPromises.set(\n        queryInstance.getOptions(),\n        new Promise(resolve => {\n          resolve(queryInstance.fetchData());\n        })\n      );\n      // Render null to abandon this subtree for this rendering, so that we\n      // can wait for the data to arrive.\n      return null;\n    }\n    return finish();\n  }\n\n  public hasPromises() {\n    return this.queryPromises.size > 0;\n  }\n\n  public consumeAndAwaitPromises() {\n    const promises: Promise<any>[] = [];\n    this.queryPromises.forEach((promise, queryInstance) => {\n      // Make sure we never try to call fetchData for this query document and\n      // these variables again. Since the queryInstance objects change with\n      // every rendering, deduplicating them by query and variables is the\n      // best we can do. If a different Query component happens to have the\n      // same query document and variables, it will be immediately rendered\n      // by calling finish() in addQueryPromise, which could result in the\n      // rendering of an unwanted loading state, but that's not nearly as bad\n      // as getting stuck in an infinite rendering loop because we kept calling\n      // queryInstance.fetchData for the same Query component indefinitely.\n      this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  }\n\n  private lookupQueryInfo<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ): QueryInfo {\n    const { queryInfoTrie } = this;\n    const { query, variables } = props;\n    const varMap = queryInfoTrie.get(query) || new Map<string, QueryInfo>();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    const variablesString = JSON.stringify(variables);\n    const info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  }\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\n\nimport { QueryComponentOptions } from './types';\n\nexport function Query<TData = any, TVariables = OperationVariables>(\n  props: QueryComponentOptions<TData, TVariables>\n) {\n  const { children, query, ...options } = props;\n  const result = useQuery(query, options);\n  return children && result ? children(result) : null;\n}\n\nexport namespace Query {\n  export const propTypes = {\n    client: PropTypes.object,\n    children: PropTypes.func.isRequired,\n    fetchPolicy: PropTypes.string,\n    notifyOnNetworkStatusChange: PropTypes.bool,\n    onCompleted: PropTypes.func,\n    onError: PropTypes.func,\n    pollInterval: PropTypes.number,\n    query: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    ssr: PropTypes.bool,\n    partialRefetch: PropTypes.bool,\n    returnPartialData: PropTypes.bool\n  };\n}\n","import { OperationVariables, QueryResult } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions } from './types';\nimport { useBaseQuery } from './utils/useBaseQuery';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { useMutation } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\n\nimport { MutationComponentOptions } from './types';\n\nexport function Mutation<TData = any, TVariables = OperationVariables>(\n  props: MutationComponentOptions<TData, TVariables>\n) {\n  const [runMutation, result] = useMutation(props.mutation, props);\n  return props.children ? props.children(runMutation, result) : null;\n}\n\nexport namespace Mutation {\n  export const propTypes = {\n    mutation: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    optimisticResponse: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    refetchQueries: PropTypes.oneOfType([\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n      ),\n      PropTypes.func\n    ]),\n    awaitRefetchQueries: PropTypes.bool,\n    update: PropTypes.func,\n    children: PropTypes.func.isRequired,\n    onCompleted: PropTypes.func,\n    onError: PropTypes.func,\n    fetchPolicy: PropTypes.string\n  };\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { MutationHookOptions, MutationTuple } from './types';\nimport { MutationData } from './data/MutationData';\n\nexport function useMutation<TData = any, TVariables = OperationVariables>(\n  mutation: DocumentNode,\n  options?: MutationHookOptions<TData, TVariables>\n): MutationTuple<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { useSubscription } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\n\nimport { SubscriptionComponentOptions } from './types';\n\nexport function Subscription<TData = any, TVariables = OperationVariables>(\n  props: SubscriptionComponentOptions<TData, TVariables>\n) {\n  const result = useSubscription(props.subscription, props);\n  return props.children && result ? props.children(result) : null;\n}\n\nexport namespace Subscription {\n  export const propTypes = {\n    subscription: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    children: PropTypes.func,\n    onSubscriptionData: PropTypes.func,\n    onSubscriptionComplete: PropTypes.func,\n    shouldResubscribe: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  };\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\n\nimport { SubscriptionHookOptions } from './types';\nimport { SubscriptionData } from './data/SubscriptionData';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const context = useContext(getApolloContext());\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n  const [result, setResult] = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  });\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  useEffect(() => subscriptionData.afterExecute());\n  useEffect(() => subscriptionData.cleanup.bind(subscriptionData), []);\n\n  return subscriptionData.execute(result);\n}\n"],"sourceRoot":""}